{
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.text.startsWith('zodiac_') }}",
              "operation": "regex",
              "value2": true
            }
          ]
        }
      },
      "name": "Is Zodiac Selection?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "chatId": "={{ $json.userId }}",
        "text": "–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É:",
        "additionalFields": {
          "reply_markup": {
            "inline_keyboard": [
              [{"text": "üìÖ –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", "callback_data": "forecast_today"}],
              [{"text": "üìÜ –ù–∞ —Ç–∏–∂–¥–µ–Ω—å", "callback_data": "forecast_week"}],
              [{"text": "üìÖ –ù–∞ –º—ñ—Å—è—Ü—å", "callback_data": "forecast_month"}],
              [{"text": "üìÜ –ù–∞ —Ä—ñ–∫", "callback_data": "forecast_year"}],
              [{"text": "üîô –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –∑–Ω–∞–∫—É", "callback_data": "astrology"}]
            ]
          }
        }
      },
      "name": "Send Forecast Period Menu",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "functionCode": "try {\n  const zodiacSign = $json.text.replace('zodiac_', '');\n  const period = $json.forecast_period || 'today';\n\n  const prompt = `–°—Ç–≤–æ—Ä–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∑–Ω–∞–∫—É ${zodiacSign} –Ω–∞ ${period}. –ü—Ä–æ–≥–Ω–æ–∑ –º–∞—î –±—É—Ç–∏:\n1. –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–º —Ç–∞ –º–æ—Ç–∏–≤—É—é—á–∏–º\n2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º\n3. –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–º –∑–∞ —Å—Ñ–µ—Ä–∞–º–∏ –∂–∏—Ç—Ç—è (–∫–∞—Ä'—î—Ä–∞, —Å—Ç–æ—Å—É–Ω–∫–∏, –∑–¥–æ—Ä–æ–≤'—è)\n4. –î–æ–≤–∂–∏–Ω–æ—é 300-400 —Å–ª—ñ–≤\n\n–ù–∞–ø–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.`;\n\n  return {\n    json: {\n      prompt,\n      zodiacSign,\n      period\n    }\n  };\n} catch (error) {\n  return {\n    json: {\n      error: true,\n      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'\n    }\n  }\n}"
      },
      "name": "Prepare OpenAI Prompt",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "authentication": "apiKey",
        "apiKey": "={{ $env.OPENAI_API_KEY }}",
        "model": "gpt-3.5-turbo",
        "prompt": "={{ $json.prompt }}",
        "options": {
          "temperature": 0.7,
          "maxTokens": 500,
          "frequencyPenalty": 0.5,
          "presencePenalty": 0.5
        }
      },
      "name": "Generate Forecast",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "functionCode": "try {\n  if ($json.error) {\n    return $json;\n  }\n  \n  const forecast = $json.response;\n  if (!forecast) {\n    throw new Error('–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ OpenAI');\n  }\n\n  return {\n    json: {\n      forecast,\n      zodiacSign: $json.zodiacSign,\n      error: false\n    }\n  };\n} catch (error) {\n  return {\n    json: {\n      error: true,\n      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'\n    }\n  };\n}"
      },
      "name": "Process OpenAI Response"
    },
    {
      "parameters": {
        "chatId": "={{ $json.userId }}",
        "text": "={{ $json.forecast }}",
        "additionalFields": {
          "reply_markup": {
            "inline_keyboard": [
              [{"text": "üîô –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É", "callback_data": "={{ 'zodiac_' + $json.zodiacSign }}"}],
              [{"text": "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "callback_data": "/start"}]
            ]
          }
        }
      },
      "name": "Send Forecast",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1050, 300]
    }
  ],
  "connections": {
    "Is Zodiac Selection?": {
      "main": [
        [
          {
            "node": "Send Forecast Period Menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Forecast Period Menu": {
      "main": [
        [
          {
            "node": "Prepare OpenAI Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare OpenAI Prompt": {
      "main": [
        [
          {
            "node": "Generate Forecast",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Forecast": {
      "main": [
        [
          {
            "node": "Process OpenAI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process OpenAI Response": {
      "main": [
        [
          {
            "node": "Send Forecast",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
} 