{
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.text.startsWith('num_') }}",
              "operation": "regex",
              "value2": true
            }
          ]
        }
      },
      "name": "Is Numerology Request?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "functionCode": "try {\n  const requestType = $json.text.replace('num_', '');\n  let message = '';\n  let keyboard = [];\n\n  switch(requestType) {\n    case 'life_path':\n      message = '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†';\n      keyboard = [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology'}]];\n      break;\n      \n    case 'personal_year':\n      message = '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†';\n      keyboard = [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology'}]];\n      break;\n      \n    case 'compatibility':\n      message = '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–≤—ñ –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\\n–î–î.–ú–ú.–†–†–†–†\\n–î–î.–ú–ú.–†–†–†–†';\n      keyboard = [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology'}]];\n      break;\n      \n    case 'name':\n      message = '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º\\'—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É';\n      keyboard = [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology'}]];\n      break;\n  }\n\n  return {\n    json: {\n      message,\n      keyboard,\n      requestType\n    }\n  };\n} catch (error) {\n  return {\n    json: {\n      error: true,\n      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'\n    }\n  }\n}"
      },
      "name": "Prepare Request Message",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "chatId": "={{ $json.userId }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "reply_markup": {
            "inline_keyboard": "={{ $json.keyboard }}"
          }
        }
      },
      "name": "Send Request Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "functionCode": "try {\n  if ($json.error) {\n    return $json;\n  }\n\n  const interpretations = $node['Read Interpretations'].json;\n  if (!interpretations) {\n    throw new Error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ–π');\n  }\n\n  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó\n  const interpretations = $node['Read Interpretations'].json;\n\n  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∏—Å–ª–∞ –∂–∏—Ç—Ç—î–≤–æ–≥–æ —à–ª—è—Ö—É\n  function calculateLifePath(dateStr) {\n    const [day, month, year] = dateStr.split('.');\n    let sum = day.split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    sum += month.split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    sum += year.split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    \n    while(sum > 9 && sum !== 11 && sum !== 22) {\n      sum = sum.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    }\n    \n    return sum;\n  }\n\n  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∏—Å–ª–∞ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —Ä–æ–∫—É\n  function calculatePersonalYear(dateStr) {\n    const [day, month, year] = dateStr.split('.');\n    const currentYear = new Date().getFullYear();\n    \n    let sum = day.split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    sum += month.split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    sum += currentYear.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    \n    while(sum > 9) {\n      sum = sum.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    }\n    \n    return sum;\n  }\n\n  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∏—Å–ª–∞ —ñ–º–µ–Ω—ñ\n  function calculateNameNumber(name) {\n    const values = {\n      '–∞': 1, '–±': 2, '–≤': 3, '–≥': 4, '“ë': 4, '–¥': 5, '–µ': 6, '—î': 6,\n      '–∂': 7, '–∑': 8, '–∏': 9, '—ñ': 1, '—ó': 1, '–π': 2, '–∫': 3, '–ª': 4,\n      '–º': 5, '–Ω': 6, '–æ': 7, '–ø': 8, '—Ä': 9, '—Å': 1, '—Ç': 2, '—É': 3,\n      '—Ñ': 4, '—Ö': 5, '—Ü': 6, '—á': 7, '—à': 8, '—â': 9, '—å': 1, '—é': 2,\n      '—è': 3\n    };\n    \n    let sum = name.toLowerCase().split('').reduce((acc, char) => {\n      return acc + (values[char] || 0);\n    }, 0);\n    \n    while(sum > 9 && sum !== 11 && sum !== 22) {\n      sum = sum.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    }\n    \n    return sum;\n  }\n\n  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ\n  function calculateCompatibility(date1, date2) {\n    const num1 = calculateLifePath(date1);\n    const num2 = calculateLifePath(date2);\n    \n    let compatibility = Math.abs(num1 - num2);\n    if(compatibility > 9) {\n      compatibility = compatibility.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    }\n    \n    return { num1, num2, compatibility };\n  }\n\n  // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∏–ø –∑–∞–ø–∏—Ç—É —Ç–∞ –¥–∞–Ω—ñ\n  const { requestType, data } = $json;\n  let result = '';\n\n  // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–∏–ø—É\n  switch(requestType) {\n    case 'life_path':\n      const lifePathNumber = calculateLifePath(data);\n      result = `üîÆ –ß–∏—Å–ª–æ –∂–∏—Ç—Ç—î–≤–æ–≥–æ —à–ª—è—Ö—É: ${lifePathNumber}\\n\\n${interpretations.lifePath[lifePathNumber]}`;\n      break;\n      \n    case 'personal_year':\n      const personalYearNumber = calculatePersonalYear(data);\n      result = `üìÖ –ß–∏—Å–ª–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —Ä–æ–∫—É: ${personalYearNumber}\\n\\n${interpretations.personalYear[personalYearNumber]}`;\n      break;\n      \n    case 'name':\n      const nameNumber = calculateNameNumber(data);\n      result = `üë§ –ß–∏—Å–ª–æ –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ: ${nameNumber}\\n\\n${interpretations.name[nameNumber]}`;\n      break;\n      \n    case 'compatibility':\n      const [date1, date2] = data.split('\\n');\n      const { num1, num2, compatibility } = calculateCompatibility(date1, date2);\n      result = `‚ù§Ô∏è –ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—á–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å:\\n\\n–ü–µ—Ä—à–µ —á–∏—Å–ª–æ –∂–∏—Ç—Ç—î–≤–æ–≥–æ —à–ª—è—Ö—É: ${num1}\\n–î—Ä—É–≥–µ —á–∏—Å–ª–æ –∂–∏—Ç—Ç—î–≤–æ–≥–æ —à–ª—è—Ö—É: ${num2}\\n–ß–∏—Å–ª–æ —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ: ${compatibility}\\n\\n${interpretations.compatibility[compatibility]}`;\n      break;\n  }\n\n  return {\n    json: {\n      result,\n      keyboard: [[{text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥—ñ—ó', callback_data: 'numerology'}]]\n    }\n  };\n} catch (error) {\n  return {\n    json: {\n      error: true,\n      message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∞—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.'\n    }\n  };\n}"
      },
      "name": "Calculate Numerology",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "chatId": "={{ $json.userId }}",
        "text": "={{ $json.result }}",
        "additionalFields": {
          "reply_markup": {
            "inline_keyboard": "={{ $json.keyboard }}"
          }
        }
      },
      "name": "Send Result",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "filePath": "./numerology-interpretations.json"
      },
      "name": "Read Interpretations",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [650, 450]
    }
  ],
  "connections": {
    "Is Numerology Request?": {
      "main": [
        [
          {
            "node": "Prepare Request Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Request Message": {
      "main": [
        [
          {
            "node": "Send Request Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Numerology": {
      "main": [
        [
          {
            "node": "Send Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Interpretations": {
      "main": [
        [
          {
            "node": "Calculate Numerology",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
} 